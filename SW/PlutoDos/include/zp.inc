
        zp_start    = $80
        ; Variables for storing MPU state after a BRK instruction
        delay_low               = zp_start
        delay_high              = zp_start + $1
        accumulator             = zp_start + $2
        x_register              = zp_start + $3
        y_register              = zp_start + $4
        mpu_status_register     = zp_start + $5
        stack_pointer           = zp_start + $6
        program_counter_low     = zp_start + $7
        program_counter_high    = zp_start + $8

        ; 65C51 IRQ handler buffer pointers and counters
        in_buffer_counter   = zp_start + $9     ; Keeps track of how many characters there are in the input buffer
        in_buffer_head      = zp_start + $a     ; Keeps track of where in the input buffer an incoming char should be placed
        in_buffer_tail      = zp_start + $b     ; Keeps track of where in the input buffer an incoming char should be taken from
        out_buffer_counter  = zp_start + $c     ; Keeps track of how many characters there are in the output buffer
        out_buffer_head     = zp_start + $d     ; Keeps track of where in the output buffer an outgoing char should be taken from
        out_buffer_tail     = zp_start + $e     ; Keeps track of where in the output buffer an outgoing char should be placed

        ; Address pointer for various routines.
        index_low = zp_start + $f
        index_high = zp_start + $10

        ; Variables for read line subroutine. A 16 byte buffer is reserved for input of characters.
        input_buffer = zp_start + $11           ; Input buffer for read_line subroutine (16 bytes)
        buffer_address_low = zp_start + $21     ; Low address pointer to input buffer. Used by read_line.
        buffer_address_high = zp_start + $22    ; High address pointer to input buffer. Used by read_line.
        buffer_length = zp_start + $23          ; Number of characters read_line should read (max = 16)
        buffer_index = zp_start + $24           ; Pointer to current character in input buffer. Used by read_line.

        number_buffer = zp_start + $25          ; A 4 byte buffer for number conversion

        ;; This flag byte holds boolean flags for various subroutines.
        ;; bit 0 and 1    - checked by read_line
        ;;              00, hex input
        ;;              01, decimal input
        ;;              10, binary          TODO
        ;;              11, ASCII text
        ;;
        control_flags = zp_start + $29
        ;================================================================================
        ;
        ;DYNAMIC STORAGE
        ;
        bits_per_digit = zp_start + $2a ;bits per digit
        curntnum = zp_start + $2b       ;numeral being processed
        radxflag = zp_start + $2c       ;$80 = processing base-10
        ;================================================================================
        ;
        ;ZERO PAGE STORAGE
        ;
        stridx = zp_start + $2f         ;string index
        sfac = zp_start + $30           ;secondary accumulator
        wrkspc01 = sfac+s_pfac          ;conversion...
        wrkspc02 = wrkspc01+s_wrkspc    ;workspace
        radix  = wrkspc02+s_wrkspc      ;radix index
        strbuf = radix + 1              ;conversion string buffer

        temp1 = strbuf + $10
        temp2 = temp1 + $1
        address_low = temp2 + $1
        address_high = address_low + $1

        stack_page  = $100

A Walkthrough of CREATE/DOES> for Tali Forth
Scot W. Stevenson <scot.stevenson@gmail.com>
First version: 14. Jan 2015
This version: 16. Jan 2015

CREATE/DOES> is the most complex, but also most powerful part of Forth. Understanding how it works in Tali Forth is important if you want to be able to modify the code. In this text, we walk through the generation process for a Subroutine Threaded Code (STC) such as Tali Forth. For a more general take, see Brad Rodriguez' series of articles http://www.bradrodriguez.com/papers/moving3.htm . There is a discussion of this walkthrough at http://forum.6502.org/viewtopic.php?f=9&t=3153 . 

We start with the following standard example, the Forth version of CONSTANT: 

        : CONSTANT CREATE , DOES> @ ; 

We examine this in three phases or "sequences", based on Derick and Baker (see Rodriguez for details):   


SEQUENCE I: Compiling the word CONSTANT 

CONSTANT is a "defining word", one that makes new words. In pseudocode, and ignoring any compilation to native 65c02 assembler, the above compiles to: 

        [Header "CONSTANT"] 
        jsr CREATE
        jsr COMMA
        jsr (DOES>)         ; from DOES>
   a:   jsr DODOES          ; from DOES>
   b:   jsr FETCH
        rts

To make things easier to explain later, we've added the labels "a" and "b" in the listing. Note that DOES> is an immediate word that adds not one, but two subroutine jumps, one to (DOES>) and one to DODOES, which is a pre-defined system routine like DOVAR. We'll get to it later.

(As an aside: In Tali Forth, a number of words such as DEFER are "hand-compiled", that is, instead of using Forth such (in this case, : DEFER CREATE ['] ABORT , DOES> @ EXECUTE ; ) we write an opimized assembler version ourselves (see actual DEFER code). In these cases, we need to use (DOES>) and DODOES instead of DOES> also.)


SEQUENCE II: Executing the word CONSTANT / creating LIFE 

Now when we execute

        42 CONSTANT LIFE

this pushes the RTS of the calling routine -- call it "main" -- to the 65c02's stack (the Return Stack, as Forth calls it), which now looks like this:

        [1] RTS to main routine 

Without going into detail, the first two subroutine jumps of CONSTANT give us this word: 

        [Header "LIFE"]
        jsr DOVAR               ; in CFA, from LIFE's CREATE
        4200                    ; in PFA (little-endian)

Next, we JSR to (DOES>). The address that this pushes on the Return Stack is the instruction of CONSTANT we had labeled "a". 

        [2] RTS to CONSTANT ("a") 
        [1] RTS to main routine 

Now the tricks start. (DOES>) takes this address off the stack and uses it to replace the DOVAR JSR target in the CFA of our freshly created LIFE word. We now have this: 

        [Header "LIFE"]         
        jsr a                   ; in CFA, modified by (DOES>)
   c:   4200                    ; in PFA (little-endian)

Note we added a label "c". Now, when (DOES>) reaches its own RTS, it finds the RTS to the main routine on its stack. This is Good Thing, because it aborts the execution of the rest of CONSTANT, and we don't want to do DODOES or FETCH now. We're back at the main routine. 


SEQUENCE III: Executing LIFE

Now we execute the word LIFE from our "main" program. In a STC Forth such as Tali Forth, this executes a subroutine jump.

        jsr LIFE

The first thing this call does is push the return address to the main routine on the 65c02's stack: 

        [1] RTS to main

The CFA of LIFE executes a subroutine jump to label "a" in CONSTANT. This pushes the RTS of LIFE on the 65c02' stack:

        [2] RTS to LIFE ("c")
        [1] RTS to main

This JSR to a lands us at the subroutine jump to DODOES, so the return address to CONSTANT gets pushed on the stack as well. We had given this instruction the label "b". After all of this, we have three addresses on the 65c02's stack: 

        [3] RTS to CONSTANT ("b") 
        [2] RTS to LIFE ("c") 
        [1] RTS to main

DODOES pops address "b" off the 65c02's stack and puts it in a nice safe place on Zero Page, which we'll call "z". More on that in a moment. First, DODOES pops the RTS to LIFE. This is "c", the address of the PFA or LIFE, where we stored the payload of this constant. Basically, DODOES performs a DOVAR here, and pushes "c" on the Data Stack. Now all we have left on the 65c02's stack is the RTS to the main routine.  

        [1] RTS to main

This is where "z" comes in, the location in Zero Page where we stored address "b" of CONSTANT. Remember, this is where CONSTANT's own PFA begins, the FETCH command we had originally codes after DOES> in the very first definition. The really clever part: We perform an indirect JMP -- not a JSR! -- to this address.

        jmp (z) 

Now CONSTANT's little payload programm is executed, the subroutine jump to FETCH. Since we just put the PFA ("c") on the Data Stack, FETCH replaces this by 42, which is what we were aiming for all along. And since CONSTANT ends with a RTS, we pull the last remaining address off the 65c02's stack, which is the return address to the main routine where we started. And that's all. 


Put together, this is what we have to code: 

DOES>: Compiles a subroutine jump to (DOES>), then compiles a subroutine jump to DODOES.

(DOES>): Pops the stack (address of subroutine jump to DODOES in CONSTANT), increase this by one, replace the original DOVAR jump target in LIFE. 

DODOES: Pop stack (CONSTANT's PFA), increase address by one, store on Zero Page; pop stack (LIFE's PFA), increase by one, store on Data Stack; JMP to address we stored in Zero Page. 


Remember we have to increase the addresses by one because of the way JSR stores the return address for RTS on the stack on the 65c02: It points to the third byte of the JSR instruction itself, not the actual return address. This can be annoying, because it requires a sequence like:

        inc z
        bne +
        inc z+1 
*       (...) 

Note that with most words in Tali Forth, as any STC Forth, the distinction between PFA and CFA is meaningless or at least blurred, because we go native anyway. It is only with words generated by CREATE/DOES> where this really makes sense.

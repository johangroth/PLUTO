!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
A2DCONV	pluto_kernel.asm	/^A2DCONV:$/;"	l
A2DDONE	pluto_kernel.asm	/^A2DDONE:$/;"	l
A2DSUB	pluto_kernel.asm	/^A2DSUB  .proc$/;"	l
ABYTE	pluto_kernel.asm	/^ABYTE   .proc$/;"	l
ACCC	pluto_kernel.asm	/^ACCC:$/;"	l
ACCUM	zp_variables.asm	/^    ACCUM    = $DA$/;"	d
ACIA	test.asm	/^        ACIA = $7FE0$/;"	d
ACIABASE	acia.asm	/^    ACIABASE = $7FE0$/;"	d
ACIAMASK	acia.asm	/^    ACIAMASK = %10001000    ;Bit 7 interrupt and bit 3 receive register full$/;"	d
ACIA_INTERRUPT	pluto_kernel.asm	/^ACIA_INTERRUPT$/;"	l
ACK	xmodem.asm	/^        ACK = $06       ; good block acknowledged$/;"	d
AGAIN	utils.asm	/^AGAIN   ROR BCDNUM+2,X      ;Start the division-by-two by shifting BCD number right.$/;"	l
AHEXIN2	pluto_kernel.asm	/^AHEXIN2:$/;"	l
AHEXIN4	pluto_kernel.asm	/^AHEXIN4:$/;"	l
AINTSAV	zp_variables.asm	/^    AINTSAV  = $ED$/;"	d
ANOTESC	pluto_kernel.asm	/^ANOTESC:$/;"	l
AOK	pluto_kernel.asm	/^AOK$/;"	l
AQUERY	pluto_kernel.asm	/^AQUERY:$/;"	l
ARND	utils.asm	/^ARND    INX$/;"	l
ASC2BN	pluto_kernel.asm	/^ASC2BN  .proc$/;"	l
ASC2BN	test.asm	/^        ASC2BN = $82AF$/;"	d
ASCII	pluto_kernel.asm	/^ASCII   .proc$/;"	l
ASCOUT	pluto_kernel.asm	/^ASCOUT:$/;"	l
ASCTODEC	pluto_kernel.asm	/^ASCTODEC    .proc         ;Initialize (zero) BCD digit input buffer:$/;"	l
ASMPROHILO	pluto_kernel.asm	/^ASMPROHILO:$/;"	l
ASOK	pluto_kernel.asm	/^ASOK:$/;"	l
ASSEM	pluto_kernel.asm	/^ASSEM   .proc$/;"	l
ATODLOOP	pluto_kernel.asm	/^ATODLOOP:$/;"	l
BACK	pluto_kernel.asm	/^BACK    .proc$/;"	l
BACK	utils.asm	/^BACK    STA BINOUT+2,X$/;"	l
BBREL	pluto_kernel.asm	/^BBREL:$/;"	l
BBRM	pluto_kernel.asm	/^BBRM:$/;"	l
BBRS	pluto_kernel.asm	/^BBRS:$/;"	l
BBSM	pluto_kernel.asm	/^BBSM:$/;"	l
BCD2BIN	utils.asm	/^BCD2BIN .proc$/;"	l
BCDNUM	zp_variables.asm	/^    BCDNUM  = $A6       ;High byte BCD number to be converted$/;"	d
BCDNUML	zp_variables.asm	/^    BCDNUML = BCDNUM+1  ;Low byte $/;"	d
BCDOUT	pluto_kernel.asm	/^BCDOUT  .proc$/;"	l
BCDOUT	utils.asm	/^BCDOUT  .proc$/;"	l
BCDOUTDN	pluto_kernel.asm	/^BCDOUTDN$/;"	l
BCDOUTL	pluto_kernel.asm	/^BCDOUTL$/;"	l
BCDTOASC	pluto_kernel.asm	/^BCDTOASC    .proc$/;"	l
BCDTOASC	utils.asm	/^BCDTOASC $/;"	l
BEEP	pluto_kernel.asm	/^BEEP    .proc$/;"	l
BEEP	test.asm	/^        BEEP = $82CB$/;"	d
BFIXBR1	pluto_kernel.asm	/^BFIXBR1:$/;"	l
BIN2BCD	utils.asm	/^BIN2BCD .proc$/;"	l
BINARY	pluto_kernel.asm	/^BINARY:$/;"	l
BINOUT	zp_variables.asm	/^    BINOUT  = $A8       ;High byte binary out after BCD conversion$/;"	d
BINOUTL	zp_variables.asm	/^    BINOUTL = BINOUT+1  ;Low byte$/;"	d
BITPOST	pluto_kernel.asm	/^BITPOST:$/;"	l
BITS	pluto_kernel.asm	/^BITS:$/;"	l
BITSEL	pluto_kernel.asm	/^BITSEL:$/;"	l
BITSET	pluto_kernel.asm	/^BITSET:$/;"	l
BN2ASC	pluto_kernel.asm	/^BN2ASC  .proc$/;"	l
BN2ASC	test.asm	/^        BN2ASC = $82D3$/;"	d
BNOK	pluto_kernel.asm	/^BNOK:$/;"	l
BRANCHOK	pluto_kernel.asm	/^BRANCHOK:$/;"	l
BRFORWD	pluto_kernel.asm	/^BRFORWD:$/;"	l
BRKINSTRUCTION	pluto_kernel.asm	/^BRKINSTRUCTION$/;"	l
BRKMASK	pluto_kernel.asm	/^        BRKMASK = %00010000   ;BRK mask in processor status register$/;"	d
BRK_INTERRUPT	pluto_kernel.asm	/^BRK_INTERRUPT$/;"	l
BROFFSET	pluto_kernel.asm	/^BROFFSET:$/;"	l
BSERROR	pluto_kernel.asm	/^BSERROR:$/;"	l
BSOUT	pluto_kernel.asm	/^BSOUT   .proc$/;"	l
BSPIND	zp_variables.asm	/^    BSPIND   = $CF$/;"	d
BTADONE	pluto_kernel.asm	/^BTADONE$/;"	l
BUFADR	zp_variables.asm	/^    BUFADR  = $C4$/;"	d
BUFADRH	zp_variables.asm	/^    BUFADRH = BUFADR+1$/;"	d
BUFIDX	zp_variables.asm	/^    BUFIDX   = $CD$/;"	d
BUFLEN	zp_variables.asm	/^    BUFLEN   = $CE$/;"	d
BYLOOP	pluto_kernel.asm	/^BYLOOP:$/;"	l
BYOK	pluto_kernel.asm	/^BYOK:$/;"	l
BYTE	utils.asm	/^        BYTE = $FE$/;"	d
BadCrc	xmodem.asm	/^BadCrc:$/;"	l
BegBlk	xmodem.asm	/^BegBlk:$/;"	l
CAN	xmodem.asm	/^        CAN = $18       ; cancel (not STAndard, not supported)$/;"	d
CHECKVIATIMER2	pluto_kernel.asm	/^CHECKVIATIMER2        $/;"	l
CHEXIN2	pluto_kernel.asm	/^CHEXIN2:$/;"	l
CHIN	pluto_kernel.asm	/^CHIN    .proc$/;"	l
CHIN	test.asm	/^        CHIN = $82F5$/;"	d
CHINLOOP	pluto_kernel.asm	/^CHINLOOP:$/;"	l
CHREG	pluto_kernel.asm	/^CHREG   .proc$/;"	l
CLKRD	pluto_kernel.asm	/^CLKRD:$/;"	l
CMDPROMPTS	pluto_kernel.asm	/^CMDPROMPTS:$/;"	l
CMON	pluto_kernel.asm	/^CMON$/;"	l
COLDSTART	pluto_kernel.asm	/^COLDSTART$/;"	l
COLDSTART	test.asm	/^        COLDSTART = $87A8$/;"	d
COMHI	zp_variables.asm	/^    COMHI   = COMLO+1$/;"	d
COMLO	zp_variables.asm	/^    COMLO   = $BE$/;"	d
COMPRESS	test.asm	/^COMPRESS    .proc$/;"	l
COMX	pluto_kernel.asm	/^COMX:$/;"	l
COMY	pluto_kernel.asm	/^COMY:$/;"	l
COUT	pluto_kernel.asm	/^COUT    .proc$/;"	l
COUT	test.asm	/^        COUT = $8317$/;"	d
COUT2	pluto_kernel.asm	/^COUT2:  .proc$/;"	l
COUT2	test.asm	/^        COUT2 = $8314$/;"	d
COUT3	pluto_kernel.asm	/^COUT3:  .proc$/;"	l
COUTL	pluto_kernel.asm	/^COUTL:  LDA  SIOSTAT  ;Read ACIA status register$/;"	l
CPXY	pluto_kernel.asm	/^CPXY:$/;"	l
CPXYAB	pluto_kernel.asm	/^CPXYAB:$/;"	l
CR	xmodem.asm	/^        CR = $0d        ; carriage return$/;"	d
CR2	pluto_kernel.asm	/^CR2     .proc$/;"	l
CR2	test.asm	/^        CR2 = $8332$/;"	d
CROUT	pluto_kernel.asm	/^CROUT   .proc$/;"	l
CROUT	test.asm	/^        CROUT = $8335$/;"	d
CSTOR2	pluto_kernel.asm	/^CSTOR2:$/;"	l
CSTOR3	pluto_kernel.asm	/^CSTOR3:$/;"	l
CTRLUGO	pluto_kernel.asm	/^CTRLUGO $/;"	l
CalcCRC	xmodem.asm	/^CalcCRC .proc$/;"	l
CalcCRC1	xmodem.asm	/^CalcCRC1:$/;"	l
CopyBlk	xmodem.asm	/^CopyBlk:$/;"	l
CopyBlk3	xmodem.asm	/^CopyBlk3:$/;"	l
CopyBlk4	xmodem.asm	/^CopyBlk4:$/;"	l
DABS	pluto_kernel.asm	/^DABS:$/;"	l
DAX	pluto_kernel.asm	/^DAX:$/;"	l
DAY	pluto_kernel.asm	/^DAY:$/;"	l
DBBR	pluto_kernel.asm	/^DBBR:$/;"	l
DBBS	pluto_kernel.asm	/^DBBS:$/;"	l
DBR1	pluto_kernel.asm	/^DBR1     CMP  #'$'     ;GOTO DNEWADR IF character = "$"$/;"	l
DEBUG	macros.asm	/^DEBUG   .macro$/;"	l
DEBUGRTC	rtc.asm	/^DEBUGRTC   .macro$/;"	l
DEBUGRTC	test.asm	/^DEBUGRTC   .macro$/;"	l
DEBUGTEXT	macros.asm	/^DEBUGTEXT$/;"	l
DEC0AND1	zp_variables.asm	/^    DEC0AND1 = $E5$/;"	d
DEC2AND3	zp_variables.asm	/^    DEC2AND3 = $E6$/;"	d
DEC4AND5	zp_variables.asm	/^    DEC4AND5 = $E7$/;"	d
DEC6AND7	zp_variables.asm	/^    DEC6AND7 = $E8$/;"	d
DEC8AND9	zp_variables.asm	/^    DEC8AND9 = $E9$/;"	d
DECDONE	pluto_kernel.asm	/^DECDONE:$/;"	l
DECINDEX	pluto_kernel.asm	/^DECINDEX    .proc$/;"	l
DECINDEX	test.asm	/^        DECINDEX = $8324$/;"	d
DECINPUT	pluto_kernel.asm	/^DECINPUT    .proc$/;"	l
DECONLY	pluto_kernel.asm	/^DECONLY:$/;"	l
DECTEST	pluto_kernel.asm	/^DECTEST:$/;"	l
DELAY1	pluto_kernel.asm	/^DELAY1  .proc$/;"	l
DELAY1	test.asm	/^        DELAY1 = $8342$/;"	d
DELAY2	pluto_kernel.asm	/^DELAY2$/;"	l
DELAY2	test.asm	/^        DELAY2 = $8346$/;"	d
DELHI	zp_variables.asm	/^    DELHI   = DELLO+1$/;"	d
DELLO	zp_variables.asm	/^    DELLO   = $C0$/;"	d
DIND	pluto_kernel.asm	/^DIND:$/;"	l
DIRECTV	pluto_kernel.asm	/^DIRECTV:$/;"	l
DIROK	pluto_kernel.asm	/^DIROK:$/;"	l
DIRTAB	pluto_kernel.asm	/^DIRTAB:$/;"	l
DIRTST	pluto_kernel.asm	/^DIRTST:$/;"	l
DISLINE	pluto_kernel.asm	/^DISLINE:$/;"	l
DISLOOP	pluto_kernel.asm	/^DISLOOP:$/;"	l
DJTAB	pluto_kernel.asm	/^DJTAB:$/;"	l
DLINE	pluto_kernel.asm	/^DLINE   JSR  SPC4     ;Send 4 [SPACE] to terminal$/;"	l
DLOOP	pluto_kernel.asm	/^DLOOP    JSR  CHIN     ;Request a keystroke from terminal$/;"	l
DMPGR	pluto_kernel.asm	/^DMPGR   .proc$/;"	l
DMTAB	pluto_kernel.asm	/^DMTAB:$/;"	l
DNEWADR	pluto_kernel.asm	/^DNEWADR  JSR  DSUB2    ;Request 2 ASCII HEX digits from terminal then convert to binary $/;"	l
DOCOM	pluto_kernel.asm	/^DOCOM   .proc$/;"	l
DODIR	pluto_kernel.asm	/^DODIR:$/;"	l
DOINTERRUPT	pluto_kernel.asm	/^DOINTERRUPT$/;"	l
DOLLAR	pluto_kernel.asm	/^DOLLAR  .proc$/;"	l
DOLLAR	test.asm	/^        DOLLAR = $832D$/;"	d
DONEFILL	pluto_kernel.asm	/^DONEFILL:$/;"	l
DONESB	pluto_kernel.asm	/^DONESB:$/;"	l
DOUPLOAD	xmodem.asm	/^DOUPLOAD:$/;"	l
DOWIPE	pluto_kernel.asm	/^DOWIPE:$/;"	l
DOWNLOAD	pluto_kernel.asm	/^DOWNLOAD   .proc$/;"	l
DPHANTOM	zp_variables.asm	/^    DPHANTOM = $00E4    ; DPHANTOM MUST be located (in target memory) immediatly below the DEC0AND1 variable$/;"	d
DRMB	pluto_kernel.asm	/^DRMB:$/;"	l
DS1511	test.asm	/^        DS1511 = $7FA0$/;"	d
DSMB	pluto_kernel.asm	/^DSMB:$/;"	l
DSUB1	pluto_kernel.asm	/^DSUB1    PHA           ;Save ACCUMULATOR on STACK: ASCII HEX high digit of a byte  $/;"	l
DSUB2	pluto_kernel.asm	/^DSUB2    JSR  CHIN     ;Request a keystroke from terminal, result in ACCUMULATOR$/;"	l
DUMPA	pluto_kernel.asm	/^DUMPA   JSR  SPC2     ;Send 2 [SPACE] to terminal$/;"	l
DUMPH	pluto_kernel.asm	/^DUMPH   JSR  PRBYTE   ;Display byte as a HEX value$/;"	l
DUNSENG	pluto_kernel.asm	/^DUNSENG:$/;"	l
DUNSINC	pluto_kernel.asm	/^DUNSINC:$/;"	l
DZX	pluto_kernel.asm	/^DZX:$/;"	l
DZY	pluto_kernel.asm	/^DZY:$/;"	l
Done	xmodem.asm	/^Done:$/;"	l
ENDDEBUGMACRO	macros.asm	/^ENDDEBUGMACRO$/;"	l
ENDIRQ	pluto_kernel.asm	/^ENDIRQ$/;"	l
ENDUMP	pluto_kernel.asm	/^ENDUMP  INC  IDX      ;Increment line counter$/;"	l
END_ACIA_INTERRUPT	pluto_kernel.asm	/^END_ACIA_INTERRUPT$/;"	l
ENTER	pluto_kernel.asm	/^ENTER:$/;"	l
EOT	xmodem.asm	/^        EOT = $04       ; end of text marker$/;"	d
ERR	pluto_kernel.asm	/^ERR     .proc$/;"	l
ERRBS	pluto_kernel.asm	/^ERRBS:$/;"	l
ESC	xmodem.asm	/^        ESC = $1b       ; ESC to exit$/;"	d
EXCEPTN1	pluto_kernel.asm	/^EXCEPTN1:$/;"	l
EXCEPTN2	pluto_kernel.asm	/^EXCEPTN2:$/;"	l
EXIT	pluto_kernel.asm	/^EXIT$/;"	l
EXITRD	pluto_kernel.asm	/^EXITRD:$/;"	l
EXITUPLOAD	xmodem.asm	/^EXITUPLOAD:$/;"	l
ErrMsg	xmodem.asm	/^ErrMsg:$/;"	l
FILAST	pluto_kernel.asm	/^FILAST:$/;"	l
FILEFT	pluto_kernel.asm	/^FILEFT: $/;"	l
FIND	pluto_kernel.asm	/^FIND:$/;"	l
FORWD	utils.asm	/^FORWD   LDA BCDNUM+2,X      ;Here bit seven is checked.$/;"	l
FULTST	pluto_kernel.asm	/^FULTST:$/;"	l
Flush	xmodem.asm	/^Flush   .proc$/;"	l
GETBYT	pluto_kernel.asm	/^GETBYT  LDA  (INDEX),Y ;Read indexed byte $/;"	l
GETNXT	pluto_kernel.asm	/^GETNXT:$/;"	l
GET_DATE_AND_TIME	test.asm	/^GET_DATE_AND_TIME   .proc$/;"	l
GET_UP_TO_16_CHR_STRING	pluto_kernel.asm	/^GET_UP_TO_16_CHR_STRING           .proc$/;"	l
GLINE	pluto_kernel.asm	/^GLINE   .proc    $/;"	l
GLINEL	pluto_kernel.asm	/^GLINEL  JSR  COUT$/;"	l
GO	pluto_kernel.asm	/^GO      .proc$/;"	l
GetBlk	xmodem.asm	/^GetBlk:$/;"	l
GetBlk2	xmodem.asm	/^GetBlk2:$/;"	l
GoodBlk1	xmodem.asm	/^GoodBlk1:$/;"	l
GoodBlk2	xmodem.asm	/^GoodBlk2:$/;"	l
GoodCrc	xmodem.asm	/^GoodCrc:$/;"	l
GoodMsg	xmodem.asm	/^GoodMsg:$/;"	l
GotByte	xmodem.asm	/^GotByte:$/;"	l
GotByte1	xmodem.asm	/^GotByte1:$/;"	l
H2LOOP	pluto_kernel.asm	/^H2LOOP:$/;"	l
H2OK	pluto_kernel.asm	/^H2OK:$/;"	l
H4LOOP	pluto_kernel.asm	/^H4LOOP:$/;"	l
H4OK	pluto_kernel.asm	/^H4OK:$/;"	l
HANDA1	pluto_kernel.asm	/^HANDA1$/;"	l
HANDA2	pluto_kernel.asm	/^HANDA2$/;"	l
HANDB1	pluto_kernel.asm	/^HANDB1$/;"	l
HANDB2	pluto_kernel.asm	/^HANDB2$/;"	l
HANDLEVIAINTERRUPT	pluto_kernel.asm	/^HANDLEVIAINTERRUPT$/;"	l
HANDSHAKECONTROLA1	pluto_kernel.asm	/^HANDSHAKECONTROLA1$/;"	l
HANDSHAKECONTROLA2	pluto_kernel.asm	/^HANDSHAKECONTROLA2$/;"	l
HANDSHAKECONTROLB1	pluto_kernel.asm	/^HANDSHAKECONTROLB1$/;"	l
HANDSHAKECONTROLB2	pluto_kernel.asm	/^HANDSHAKECONTROLB2$/;"	l
HEX0AND1	zp_variables.asm	/^    HEX0AND1 = $E1$/;"	d
HEX2AND3	zp_variables.asm	/^    HEX2AND3 = $E2$/;"	d
HEX4AND5	zp_variables.asm	/^    HEX4AND5 = $E3$/;"	d
HEX6AND7	zp_variables.asm	/^    HEX6AND7 = $E4$/;"	d
HEXDIGIT	pluto_kernel.asm	/^HEXDIGIT:$/;"	l
HEXIN	pluto_kernel.asm	/^HEXIN   .proc $/;"	l
HEXIN	test.asm	/^        HEXIN = $8357$/;"	d
HEXIN2	pluto_kernel.asm	/^HEXIN2  .proc$/;"	l
HEXIN2	test.asm	/^        HEXIN2 = $8351$/;"	d
HEXIN4	pluto_kernel.asm	/^HEXIN4  .proc$/;"	l
HEXIN4	test.asm	/^        HEXIN4 = $8355$/;"	d
HEXOUT	pluto_kernel.asm	/^HEXOUT  .proc$/;"	l
HEXOUTDN	pluto_kernel.asm	/^HEXOUTDN:$/;"	l
HEXOUTL	pluto_kernel.asm	/^HEXOUTL:$/;"	l
HEXTOASC	pluto_kernel.asm	/^HEXTOASC    .proc$/;"	l
HNONZERO	pluto_kernel.asm	/^HNONZERO:$/;"	l
HPHANTOM	zp_variables.asm	/^    HPHANTOM = $00E0    ; HPHANTOM MUST be located (in target memory) immediatly below the HEX0AND1 variable$/;"	d
HPTAB	pluto_kernel.asm	/^HPTAB:$/;"	l
HTAB	pluto_kernel.asm	/^HTAB:$/;"	l
HTADONE	pluto_kernel.asm	/^HTADONE:$/;"	l
IDX	zp_variables.asm	/^    IDX      = $D0$/;"	d
IDY	zp_variables.asm	/^    IDY      = $D1$/;"	d
IME	pluto_kernel.asm	/^IME:$/;"	l
IMP	pluto_kernel.asm	/^IMP:$/;"	l
IN2	pluto_kernel.asm	/^IN2:$/;"	l
IN3	pluto_kernel.asm	/^IN3:$/;"	l
IN4	pluto_kernel.asm	/^IN4:    LDA  INBUFF   ;Convert 2 ASCII HEX digits in INBUFF(high digit),$/;"	l
INBUFF	zp_variables.asm	/^    INBUFF   = $B0      ;14 bytes ($B0-$BD)$/;"	d
INC	pluto_kernel.asm	/^INC:$/;"	l
INCDONE	pluto_kernel.asm	/^INCDONE:$/;"	l
INCINDEX	pluto_kernel.asm	/^INCINDEX    .proc$/;"	l
INCINDEX	test.asm	/^        INCINDEX = $83E9$/;"	d
INCNDX	pluto_kernel.asm	/^INCNDX:$/;"	l
INCNT	zp_variables.asm	/^    INCNT    = $EB$/;"	d
INDABSX	pluto_kernel.asm	/^INDABSX:$/;"	l
INDEX	zp_variables.asm	/^    INDEX   = $C8$/;"	d
INDEXH	zp_variables.asm	/^    INDEXH  = INDEX+1$/;"	d
INDJ	pluto_kernel.asm	/^INDJ:$/;"	l
INDX	pluto_kernel.asm	/^INDX:$/;"	l
INERR	pluto_kernel.asm	/^INERR$/;"	l
INITACIA	acia.asm	/^INITACIA    .proc$/;"	l
INITRTC	rtc.asm	/^INITRTC .proc$/;"	l
INITTXT	rtc.asm	/^INITTXT$/;"	l
INITTXT	test.asm	/^INITTXT$/;"	l
INITVIA	via.asm	/^INITVIA .proc$/;"	l
INQTY	zp_variables.asm	/^    INQTY    = $EA$/;"	d
INTERRUPT	pluto_kernel.asm	/^INTERRUPT$/;"	l
INTERRUPT	test.asm	/^        INTERRUPT = $8902$/;"	d
INTERRUPTVECTOR	pluto_kernel.asm	/^    INTERRUPTVECTOR = $0302$/;"	d
IO_RTC	1511_constants.asm	/^    IO_RTC = $7FA0$/;"	d
IO_RTC	pluto_kernel.asm	/^    IO_RTC = $7FA0$/;"	d
ITER	pluto_kernel.asm	/^ITER$/;"	l
IncBlk	xmodem.asm	/^IncBlk:$/;"	l
JSR	pluto_kernel.asm	/^        JSR  SET      ; do short delay$/;"	d
JSUB	pluto_kernel.asm	/^JSUB:$/;"	l
JTAB	pluto_kernel.asm	/^JTAB:$/;"	l
JUMPS	pluto_kernel.asm	/^JUMPS:$/;"	l
JUST3	pluto_kernel.asm	/^JUST3:$/;"	l
JUST4	pluto_kernel.asm	/^JUST4   .proc$/;"	l
JUSTBYTE	pluto_kernel.asm	/^JUSTBYTE$/;"	l
KEYBUFF	pluto_kernel.asm	/^    KEYBUFF  = $0200    ;256 bytes: ($200-$2FF) keystrokes (data from ACIA) are stored here$/;"	d
KEYCONV	pluto_kernel.asm	/^KEYCONV:$/;"	l
L1	test.asm	/^L1$/;"	l
L1	utils.asm	/^L1$/;"	l
L10	rtc.asm	/^L10$/;"	l
L2	test.asm	/^L2      STA  TODBUF,X$/;"	l
L2	test.asm	/^L2$/;"	l
LAKE	utils.asm	/^LAKE    LDA BCDNUM+2,X$/;"	l
LBR	pluto_kernel.asm	/^LBR:$/;"	l
LDAABS	pluto_kernel.asm	/^LDAABS:$/;"	l
LDAB	pluto_kernel.asm	/^LDAB:$/;"	l
LDABS	pluto_kernel.asm	/^LDABS:$/;"	l
LDACC	pluto_kernel.asm	/^LDACC:$/;"	l
LDAZX	pluto_kernel.asm	/^LDAZX:$/;"	l
LDIX	pluto_kernel.asm	/^LDIX:$/;"	l
LDNIM	pluto_kernel.asm	/^LDNIM:$/;"	l
LDXY	pluto_kernel.asm	/^LDXY:$/;"	l
LDZP	pluto_kernel.asm	/^LDZP:$/;"	l
LF	xmodem.asm	/^        LF = $0a        ; line feed$/;"	d
LIST	pluto_kernel.asm	/^LIST:$/;"	l
LISTER	pluto_kernel.asm	/^LISTER  .proc$/;"	l
LOKOUT	zp_variables.asm	/^    LOKOUT   = $D9$/;"	d
LOOP	utils.asm	/^LOOP    $/;"	l
LS1	pluto_kernel.asm	/^LS1:$/;"	l
LS2	pluto_kernel.asm	/^LS2:$/;"	l
LS4	pluto_kernel.asm	/^LS4:$/;"	l
LS5	pluto_kernel.asm	/^LS5:$/;"	l
LS6	pluto_kernel.asm	/^LS6:$/;"	l
LS7	pluto_kernel.asm	/^LS7:$/;"	l
LSPRD	pluto_kernel.asm	/^LSPRD:$/;"	l
LSTNEW	pluto_kernel.asm	/^LSTNEW:$/;"	l
LSTOR2	pluto_kernel.asm	/^LSTOR2:$/;"	l
LSTOR3	pluto_kernel.asm	/^LSTOR3:$/;"	l
LdBuff0	xmodem.asm	/^LdBuff0:$/;"	l
LdBuff1	xmodem.asm	/^LdBuff1:$/;"	l
LdBuff2	xmodem.asm	/^LdBuff2:$/;"	l
LdBuff3	xmodem.asm	/^LdBuff3:$/;"	l
LdBuff4	xmodem.asm	/^LdBuff4:$/;"	l
LdBuff5	xmodem.asm	/^LdBuff5:$/;"	l
LdBuffer	xmodem.asm	/^LdBuffer:$/;"	l
MDLOOP	pluto_kernel.asm	/^MDLOOP  TXA           ;Send "00" thru "0F", separated by 2 [SPACE], to terminal  $/;"	l
MDUMP	pluto_kernel.asm	/^MDUMP   .proc$/;"	l
MEMDMP	pluto_kernel.asm	/^MEMDMP  .proc   $/;"	l
MFILL	pluto_kernel.asm	/^MFILL   .proc$/;"	l
MONITOR	pluto_kernel.asm	/^MONITOR .proc$/;"	l
MONPROHILO	pluto_kernel.asm	/^MONPROHILO:$/;"	l
MONPROMPT	pluto_kernel.asm	/^MONPROMPT:$/;"	l
MONTAB	pluto_kernel.asm	/^MONTAB:$/;"	l
MORDIS	pluto_kernel.asm	/^MORDIS:$/;"	l
MORLOOP	pluto_kernel.asm	/^MORLOOP:$/;"	l
MOVER	pluto_kernel.asm	/^MOVER   .proc$/;"	l
MPTAB	pluto_kernel.asm	/^MPTAB:$/;"	l
MSPC	pluto_kernel.asm	/^MSPC:$/;"	l
MTAB	pluto_kernel.asm	/^MTAB:$/;"	l
MVPAG	pluto_kernel.asm	/^MVPAG:$/;"	l
MVPGE	pluto_kernel.asm	/^MVPGE:$/;"	l
MVREST	pluto_kernel.asm	/^MVREST:$/;"	l
Msg	xmodem.asm	/^Msg:$/;"	l
NAK	xmodem.asm	/^        NAK = $15       ; bad block acknowledged$/;"	d
NCSREG	pluto_kernel.asm	/^NCSREG:$/;"	l
NEM	pluto_kernel.asm	/^NEM:$/;"	l
NEVERA	pluto_kernel.asm	/^NEVERA:$/;"	l
NEWADR	pluto_kernel.asm	/^NEWADR  JSR  JUST4.IN4      ;Convert keystrokes in INBUFF thru INBUFF + 3 to binary, result in INDEX,INDEXH$/;"	l
NEWLIN	pluto_kernel.asm	/^NEWLIN:$/;"	l
NEWQUERYADRS	pluto_kernel.asm	/^NEWQUERYADRS:$/;"	l
NEWQUERYAGAIN	pluto_kernel.asm	/^NEWQUERYAGAIN:$/;"	l
NEWQUERYDONE	pluto_kernel.asm	/^NEWQUERYDONE:$/;"	l
NEWQUERYSTRS	pluto_kernel.asm	/^NEWQUERYSTRS:$/;"	l
NEXT	pluto_kernel.asm	/^NEXT:$/;"	l
NEXT	via.asm	/^NEXT$/;"	l
NLIN	pluto_kernel.asm	/^NLIN:$/;"	l
NMON	pluto_kernel.asm	/^NMON$/;"	l
NMON	test.asm	/^        NMON = $8812$/;"	d
NOABINX	pluto_kernel.asm	/^NOABINX:$/;"	l
NOIND	pluto_kernel.asm	/^NOIND:$/;"	l
NONZERO	pluto_kernel.asm	/^NONZERO$/;"	l
NORMLFWD	pluto_kernel.asm	/^NORMLFWD:$/;"	l
NOTA	pluto_kernel.asm	/^NOTA:$/;"	l
NOTESC	pluto_kernel.asm	/^NOTESC$/;"	l
NOTIMED	pluto_kernel.asm	/^NOTIMED:$/;"	l
NOTIND	pluto_kernel.asm	/^NOTIND:$/;"	l
NOTIXY	pluto_kernel.asm	/^NOTIXY:$/;"	l
NOTLESS	pluto_kernel.asm	/^NOTLESS:$/;"	l
NOTSPC	pluto_kernel.asm	/^NOTSPC:$/;"	l
NOTZ2S	pluto_kernel.asm	/^NOTZ2S:$/;"	l
NQDONE	pluto_kernel.asm	/^NQDONE:$/;"	l
OCTAB	pluto_kernel.asm	/^OCTAB:$/;"	l
OPHI	zp_variables.asm	/^    OPHI     = $D4$/;"	d
OPLO	zp_variables.asm	/^    OPLO     = $D3$/;"	d
OPTAB	pluto_kernel.asm	/^OPTAB:$/;"	l
OUT	utils.asm	/^OUT     RTS$/;"	l
OUTCNT	zp_variables.asm	/^    OUTCNT   = $EC$/;"	d
PERIOD	pluto_kernel.asm	/^PERIOD:$/;"	l
PGFILL	pluto_kernel.asm	/^PGFILL:$/;"	l
POINTER	zp_variables.asm	/^    POINTER  = $DF$/;"	d
PR1	pluto_kernel.asm	/^PR1:$/;"	l
PR2	pluto_kernel.asm	/^PR2:$/;"	l
PRASC	pluto_kernel.asm	/^PRASC   .proc$/;"	l
PRASC	test.asm	/^        PRASC = $8489$/;"	d
PRBIT	pluto_kernel.asm	/^PRBIT   .proc$/;"	l
PRBYTE	pluto_kernel.asm	/^PRBYTE  .proc$/;"	l
PRBYTE	test.asm	/^        PRBYTE = $8496$/;"	d
PREG	zp_variables.asm	/^    PREG     = $DE$/;"	d
PRINDX	pluto_kernel.asm	/^PRINDX  .proc$/;"	l
PRINDX	test.asm	/^        PRINDX = $84A7$/;"	d
PRINT_DATE_AND_TIME	test.asm	/^PRINT_DATE_AND_TIME .proc$/;"	l
PRML	pluto_kernel.asm	/^PRML:$/;"	l
PRMNEM	pluto_kernel.asm	/^PRMNEM:$/;"	l
PROHI	zp_variables.asm	/^    PROHI   = PROLO+1$/;"	d
PROLO	zp_variables.asm	/^    PROLO   = $C2$/;"	d
PROMPT	pluto_kernel.asm	/^PROMPT  .proc$/;"	l
PROMPT	test.asm	/^        PROMPT = $84B4$/;"	d
PROMPT2	pluto_kernel.asm	/^PROMPT2 .proc$/;"	l
PROMPT2	test.asm	/^        PROMPT2 = $86FF$/;"	d
PUT_DATE_AND_TIME	test.asm	/^PUT_DATE_AND_TIME  .proc$/;"	l
PrintMsg	xmodem.asm	/^PrintMsg    .proc$/;"	l
Print_Err	xmodem.asm	/^Print_Err   .proc$/;"	l
Print_Good	xmodem.asm	/^Print_Good  .proc$/;"	l
PrtAbort	xmodem.asm	/^PrtAbort:$/;"	l
QUERY	pluto_kernel.asm	/^QUERY:$/;"	l
QUITFILL	pluto_kernel.asm	/^QUITFILL:$/;"	l
QUITMV	pluto_kernel.asm	/^QUITMV:$/;"	l
QUITP	pluto_kernel.asm	/^QUITP:$/;"	l
RBR	pluto_kernel.asm	/^RBR:$/;"	l
RDCHAR	pluto_kernel.asm	/^RDCHAR  .proc$/;"	l
RDEC	pluto_kernel.asm	/^RDEC:$/;"	l
RDLINE	pluto_kernel.asm	/^RDLINE  .proc$/;"	l
RDLINE	test.asm	/^        RDLINE = $84ED$/;"	d
RDLOOP	pluto_kernel.asm	/^RDLOOP$/;"	l
RDLOOP2	pluto_kernel.asm	/^RDLOOP2:$/;"	l
RDNDX	pluto_kernel.asm	/^RDNDX:$/;"	l
RDONE	pluto_kernel.asm	/^RDONE:$/;"	l
RDoneNow	xmodem.asm	/^RDoneNow:$/;"	l
READ	pluto_kernel.asm	/^READ    .proc$/;"	l
RECODE	pluto_kernel.asm	/^RECODE:$/;"	l
REENTR	pluto_kernel.asm	/^REENTR:$/;"	l
REGARA	pluto_kernel.asm	/^REGARA:$/;"	l
REL	pluto_kernel.asm	/^REL:$/;"	l
RELATIVE	pluto_kernel.asm	/^RELATIVE:$/;"	l
RELLOOP	pluto_kernel.asm	/^RELLOOP:$/;"	l
REORIG	pluto_kernel.asm	/^REORIG:$/;"	l
RESREGS	pluto_kernel.asm	/^RESREGS .proc$/;"	l
RESREGS	test.asm	/^        RESREGS = $8555$/;"	d
REST	pluto_kernel.asm	/^REST:$/;"	l
RET	pluto_kernel.asm	/^RET     RTS           ;Done LISTER command, RETURN. RET label is defined for [BREAK] button$/;"	l
RETURN	utils.asm	/^RETURN  ROR BINOUT+2,X$/;"	l
RIGHT	pluto_kernel.asm	/^RIGHT$/;"	l
RMBM	pluto_kernel.asm	/^RMBM:$/;"	l
RMOV	pluto_kernel.asm	/^RMOV:$/;"	l
RT	pluto_kernel.asm	/^RT:$/;"	l
RT1	zp_variables.asm	/^    RT1      = $D6$/;"	d
RT2	zp_variables.asm	/^    RT2      = $D7$/;"	d
Rbuff	xmodem.asm	/^        Rbuff = $0300       ; temp 132 byte receive buffer$/;"	d
Resend	xmodem.asm	/^Resend:$/;"	l
SAVEACC	zp_variables.asm	/^    SAVEACC  = $AD$/;"	d
SAVEX	zp_variables.asm	/^    SAVEX    = $AE$/;"	d
SAVEY	zp_variables.asm	/^    SAVEY    = $AF$/;"	d
SAVLST	pluto_kernel.asm	/^SAVLST:$/;"	l
SAVREGS	pluto_kernel.asm	/^SAVREGS .proc$/;"	l
SAVREGS	test.asm	/^        SAVREGS = $854E$/;"	d
SBLOOP	pluto_kernel.asm	/^SBLOOP:$/;"	l
SBYTSTR	pluto_kernel.asm	/^SBYTSTR                           .proc$/;"	l
SCNT	zp_variables.asm	/^    SCNT     = $D2$/;"	d
SCalcCRC	xmodem.asm	/^SCalcCRC:$/;"	l
SENDIGIT	pluto_kernel.asm	/^SENDIGIT:$/;"	l
SENDIT	pluto_kernel.asm	/^SENDIT  .proc$/;"	l
SENGBR1	pluto_kernel.asm	/^SENGBR1:$/;"	l
SENGBR2	pluto_kernel.asm	/^SENGBR2:$/;"	l
SENGBR3	pluto_kernel.asm	/^SENGBR3:$/;"	l
SENGINE	pluto_kernel.asm	/^SENGINE .proc$/;"	l
SET	test.asm	/^        SET = $855C$/;"	d
SETIM	zp_variables.asm	/^    SETIM    = $D8$/;"	d
SETUP	pluto_kernel.asm	/^SETUP   .proc$/;"	l
SHEXIN4	pluto_kernel.asm	/^SHEXIN4:$/;"	l
SHFT3	pluto_kernel.asm	/^SHFT3:$/;"	l
SHIFT	pluto_kernel.asm	/^SHIFT$/;"	l
SHIFT	pluto_kernel.asm	/^SHIFT:$/;"	l
SHIFTREGISTER	pluto_kernel.asm	/^SHIFTREGISTER$/;"	l
SHRO	pluto_kernel.asm	/^SHRO:$/;"	l
SHROAB	pluto_kernel.asm	/^SHROAB:$/;"	l
SHROZP	pluto_kernel.asm	/^SHROZP:$/;"	l
SIN	pluto_kernel.asm	/^SIN:$/;"	l
SINCPTR	pluto_kernel.asm	/^SINCPTR:$/;"	l
SIOCOM	acia.asm	/^    SIOCOM   = SIODAT+2     ;ACIA command REGISTER$/;"	d
SIOCON	acia.asm	/^    SIOCON   = SIODAT+3     ;ACIA control REGISTER$/;"	d
SIODAT	acia.asm	/^    SIODAT   = $7FE0        ;ACIA data register   <--put your 6551 ACIA base address here$/;"	d
SIOSTAT	acia.asm	/^    SIOSTAT  = SIODAT+1     ;ACIA status REGISTER$/;"	d
SKIP1	pluto_kernel.asm	/^SKIP1:$/;"	l
SKIP2	pluto_kernel.asm	/^SKIP2:$/;"	l
SKIP3	pluto_kernel.asm	/^SKIP3:$/;"	l
SLOOP	pluto_kernel.asm	/^SLOOP:$/;"	l
SMBM	pluto_kernel.asm	/^SMBM:$/;"	l
SOH	xmodem.asm	/^        SOH = $01       ; Start block$/;"	d
SPC	pluto_kernel.asm	/^SPC     .proc$/;"	l
SPC2	pluto_kernel.asm	/^SPC2    .proc$/;"	l
SPC2	test.asm	/^        SPC2 = $8584$/;"	d
SPC4	pluto_kernel.asm	/^SPC4    .proc$/;"	l
SPC4	test.asm	/^        SPC4 = $8581$/;"	d
SPCRD	pluto_kernel.asm	/^SPCRD:$/;"	l
SRAB	pluto_kernel.asm	/^SRAB:$/;"	l
SRBIT	pluto_kernel.asm	/^SRBIT:$/;"	l
SRBIT2	pluto_kernel.asm	/^SRBIT2:$/;"	l
SRCHBUFF	pluto_kernel.asm	/^    SRCHBUFF = $00F0    ;16 bytes ($F0-$FF) (notice that this variable MUST be expressed as a 16 bit address$/;"	d
SREG	zp_variables.asm	/^    SREG     = $DD$/;"	d
SRG	pluto_kernel.asm	/^SRG     .proc$/;"	l
SRM	pluto_kernel.asm	/^SRM:$/;"	l
SRMB	pluto_kernel.asm	/^SRMB:$/;"	l
SRMB2	pluto_kernel.asm	/^SRMB2:$/;"	l
STAB	pluto_kernel.asm	/^STAB:$/;"	l
STACC	pluto_kernel.asm	/^STACC:$/;"	l
STACKPTR	pluto_kernel.asm	/^        STACKPTR = $103       ;Stacked processor status register$/;"	d
STAIN	pluto_kernel.asm	/^STAIN:$/;"	l
START	utils.asm	/^START   CLD                 ;Clear decimal mode.$/;"	l
STATUSREGISTER	zp_variables.asm	/^    STATUSREGISTER = $AB$/;"	d
STBR1	pluto_kernel.asm	/^STBR1:$/;"	l
STBR2	pluto_kernel.asm	/^STBR2:$/;"	l
STBR3	pluto_kernel.asm	/^STBR3:$/;"	l
STEMP	zp_variables.asm	/^    STEMP    = $D5$/;"	d
STLOOP	pluto_kernel.asm	/^STLOOP:$/;"	l
STOR	pluto_kernel.asm	/^STOR:$/;"	l
STOR2	pluto_kernel.asm	/^STOR2:$/;"	l
STOR3	pluto_kernel.asm	/^STOR3:$/;"	l
STORLF	pluto_kernel.asm	/^STORLF:$/;"	l
STOZ	pluto_kernel.asm	/^STOZ:$/;"	l
STRCH	pluto_kernel.asm	/^STRCH:$/;"	l
STRINGL	pluto_kernel.asm	/^STRINGL:$/;"	l
STXY	pluto_kernel.asm	/^STXY:$/;"	l
STZP	pluto_kernel.asm	/^STZP:$/;"	l
SUBTRACT	pluto_kernel.asm	/^SUBTRACT:$/;"	l
SendBlk	xmodem.asm	/^SendBlk:$/;"	l
Seterror	xmodem.asm	/^Seterror:$/;"	l
SetstAddr	xmodem.asm	/^SetstAddr:$/;"	l
StartBlk	xmodem.asm	/^StartBlk:$/;"	l
StartCrc	xmodem.asm	/^StartCrc:$/;"	l
TABLE1	utils.asm	/^TABLE1     .BYTE  $01$/;"	l
TABLE2	utils.asm	/^TABLE2     .BYTE  $00$/;"	l
TEMP	zp_variables.asm	/^    TEMP     = $CC$/;"	d
TEMP2	zp_variables.asm	/^    TEMP2   = $C6$/;"	d
TEMP2H	zp_variables.asm	/^    TEMP2H  = TEMP2+1$/;"	d
TEMP3	zp_variables.asm	/^    TEMP3   = $CA$/;"	d
TEMP3H	zp_variables.asm	/^    TEMP3H  = TEMP3+1$/;"	d
THERE	utils.asm	/^THERE   LDX #BYTE           ;Rotate the binary number right, moving the remainder from the BCD division into the binary number.$/;"	l
THX	pluto_kernel.asm	/^THX:$/;"	l
THY	pluto_kernel.asm	/^THY:$/;"	l
TIMER	pluto_kernel.asm	/^TIMER:$/;"	l
TIMER	test.asm	/^        TIMER = $855E$/;"	d
TIMER1	pluto_kernel.asm	/^TIMER1$/;"	l
TIMER1TXT	pluto_kernel.asm	/^TIMER1TXT$/;"	l
TIMER2	pluto_kernel.asm	/^TIMER2$/;"	l
TIMER2TXT	pluto_kernel.asm	/^TIMER2TXT$/;"	l
TIMERL	pluto_kernel.asm	/^TIMERL:$/;"	l
TOD	1511_constants.asm	/^    TOD = $A0       ;Compressed Date structure compatible with CFS 0.11$/;"	d
TODBUF	1511_constants.asm	/^    TODBUF = $0400    ;Temporary buffer for RTC time and date registers$/;"	d
TOOFAR	pluto_kernel.asm	/^TOOFAR:$/;"	l
TOOHI	pluto_kernel.asm	/^TOOHI:$/;"	l
TRIBYT	pluto_kernel.asm	/^TRIBYT:$/;"	l
TSRB	pluto_kernel.asm	/^TSRB:$/;"	l
TSRBIN	pluto_kernel.asm	/^TSRBIN:$/;"	l
TWOBYT	pluto_kernel.asm	/^TWOBYT:$/;"	l
UPLOAD	xmodem.asm	/^UPLOAD  .proc$/;"	l
USERFILL	pluto_kernel.asm	/^USERFILL:$/;"	l
VIA	test.asm	/^        VIA = $7FC0$/;"	d
VIAACR	via.asm	/^    VIAACR  = VIABASE+$B    ; Auxiliary Control Register$/;"	d
VIABASE	via.asm	/^    VIABASE = $7FC0 ;Write Output Register B, Read Input Register B$/;"	d
VIADDRA	via.asm	/^    VIADDRA = VIABASE+3     ; Data Direction Register A$/;"	d
VIADDRB	via.asm	/^    VIADDRB = VIABASE+2     ; Data Direction Register B$/;"	d
VIAIER	via.asm	/^    VIAIER  = VIABASE+$E    ; Interrupt Enable Register$/;"	d
VIAIFR	via.asm	/^    VIAIFR  = VIABASE+$D    ; Interrupt Flag Register$/;"	d
VIAIFRIRQ	via.asm	/^    VIAIFRIRQ = 7$/;"	d
VIAINITTABLE	via.asm	/^VIAINITTABLE$/;"	l
VIAINTERRUPT	pluto_kernel.asm	/^VIAINTERRUPT$/;"	l
VIAPCR	via.asm	/^    VIAPCR  = VIABASE+$C    ; Peripheral Control Register$/;"	d
VIARA	via.asm	/^    VIARA   = VIABASE+1     ; Write Output Register A, Read Input Register A$/;"	d
VIARANH	via.asm	/^    VIARANH = VIABASE+$F    ; Same as Reg A except no "Handshake"$/;"	d
VIARB	via.asm	/^    VIARB   = VIABASE+0     ; Write Output Register B, Read Input Register B$/;"	d
VIASR	via.asm	/^    VIASR   = VIABASE+$A    ; Shift Register$/;"	d
VIAT1CH	via.asm	/^    VIAT1CH = VIABASE+5     ; T1 High-Order Counter$/;"	d
VIAT1CL	via.asm	/^    VIAT1CL = VIABASE+4     ; Write T1 Low-Order Latches, Read T1 Low-Order Counter$/;"	d
VIAT1LH	via.asm	/^    VIAT1LH = VIABASE+7     ; T1 High-Order Latches$/;"	d
VIAT1LL	via.asm	/^    VIAT1LL = VIABASE+6     ; T1 Low-Order Latches$/;"	d
VIAT2CH	via.asm	/^    VIAT2CH = VIABASE+9     ; T2 High-Order Counter$/;"	d
VIAT2CL	via.asm	/^    VIAT2CL = VIABASE+8     ; Write T2 Low-Order Latches, Read T2 Low-Order Counter$/;"	d
VIATEMP	zp_variables.asm	/^    VIATEMP  = $AC$/;"	d
VIATIMER1MASK	via.asm	/^    VIATIMER1MASK = 6$/;"	d
VIATIMER2MASK	via.asm	/^    VIATIMER2MASK = 5$/;"	d
VIEWEXIT	pluto_kernel.asm	/^VIEWEXIT:$/;"	l
WAIT	pluto_kernel.asm	/^WAIT$/;"	l
WARMST	pluto_kernel.asm	/^WARMST    $/;"	l
WATCH	pluto_kernel.asm	/^WATCH   .proc$/;"	l
WATCHL	pluto_kernel.asm	/^WATCHL$/;"	l
WDLOOP	pluto_kernel.asm	/^WDLOOP:$/;"	l
WDOK	pluto_kernel.asm	/^WDOK:$/;"	l
WIPE	pluto_kernel.asm	/^WIPE    .proc$/;"	l
WIPELOOP	pluto_kernel.asm	/^WIPELOOP$/;"	l
WITCHWAY	pluto_kernel.asm	/^WITCHWAY:$/;"	l
WORD	pluto_kernel.asm	/^WORD:$/;"	l
Wait4CRC	xmodem.asm	/^Wait4CRC:$/;"	l
X2	pluto_kernel.asm	/^X2:$/;"	l
X3	pluto_kernel.asm	/^X3:$/;"	l
XINTSAV	zp_variables.asm	/^    XINTSAV  = $EE$/;"	d
XITDMP	pluto_kernel.asm	/^XITDMP  JSR  GLINE    ; ELSE, Send horizontal line to terminal$/;"	l
XModemReceive	xmodem.asm	/^XModemReceive .proc$/;"	l
XModemSend	xmodem.asm	/^XModemSend:$/;"	l
XREG	zp_variables.asm	/^    XREG     = $DB$/;"	d
XYNOIM	pluto_kernel.asm	/^XYNOIM:$/;"	l
YINTSAV	zp_variables.asm	/^    YINTSAV  = $EF$/;"	d
YREG	zp_variables.asm	/^    YREG     = $DC$/;"	d
Z2SOK	pluto_kernel.asm	/^Z2SOK:$/;"	l
ZERO	pluto_kernel.asm	/^ZERO:$/;"	l
ZEROABS	pluto_kernel.asm	/^ZEROABS:$/;"	l
ZPDIND	pluto_kernel.asm	/^ZPDIND:$/;"	l
ZPIND	pluto_kernel.asm	/^ZPIND:$/;"	l
alarm	rtc.asm	/^alarm   .proc$/;"	l
alarm	rtc816.asm	/^alarm                             .proc    $/;"	l
alarm	test.asm	/^alarm   .proc$/;"	l
bflag	xmodem.asm	/^        bflag = $a7         ; block flag$/;"	d
blkno	xmodem.asm	/^        blkno = $a6         ; block number$/;"	d
constime	rtc.asm	/^constime    .proc$/;"	l
constime	rtc816.asm	/^constime    .proc$/;"	l
constime	test.asm	/^constime    .proc$/;"	l
cra_rtc	1511.asm	/^cra_rtc  =io_rtc+wr_cra        ;control register A $/;"	l
crb_rtc	1511.asm	/^crb_rtc  =io_rtc+wr_crb        ;control register B $/;"	l
crc	xmodem.asm	/^        crc = $a8           ; CRC lo byte  (two byte variable)$/;"	d
crch	xmodem.asm	/^        crch = $a9          ; CRC hi byte$/;"	d
crchi	xmodem.asm	/^crchi:$/;"	l
crclo	xmodem.asm	/^crclo:$/;"	l
d11aimsk	1511_constants.asm	/^d11aimsk =%00100000            ;enable NVRAM autoincrement$/;"	l
d11ecmsk	1511_constants.asm	/^d11ecmsk =%11100000            ;extract control value$/;"	l
d11emmsk	1511_constants.asm	/^d11emmsk =%00011111            ;extract month value$/;"	l
d11ismsk	1511_constants.asm	/^d11ismsk =%00000011            ;IRQ sources$/;"	l
d11noirq	1511_constants.asm	/^d11noirq =%00000000            ;disable IRQs & updates$/;"	l
d11onirq	1511_constants.asm	/^d11onirq =%10100010            ;enable IRQs & updates$/;"	l
d11sumsk	1511_constants.asm	/^d11sumsk =%01111111            ;stop register updates$/;"	l
d11tab	rtc816.asm	/^d11tab                            .byte wr_crb, wr_crbpb  ;CRB : updates & WDT IRQs on$/;"	l
datt_rtc	1511.asm	/^datt_rtc =io_rtc+wr_datt       ;date $/;"	l
done	basic_ide_routines.asm	/^done   	beq ide_to2$/;"	l
done	basic_ide_routines.asm	/^done   	lda ide_register7	;get status in A$/;"	l
done	cfs.asm	/^done			rts$/;"	l
dowa_rtc	1511.asm	/^dowa_rtc =io_rtc+wr_dowa       ;alarm date\/day & IRQ control $/;"	l
dowt_rtc	1511.asm	/^dowt_rtc =io_rtc+wr_dowt       ;day of week $/;"	l
eofp	xmodem.asm	/^        eofp = TEMP2        ; end of file address pointer (2 bytes)$/;"	d
eofph	xmodem.asm	/^        eofph = TEMP2H      ;  "    "   "   "$/;"	d
errcnt	xmodem.asm	/^        errcnt = $a7        ; error counter 10 is the limit$/;"	d
error	basic_ide_routines.asm	/^error$/;"	l
find_boot_sector	cfs.asm	/^find_boot_sector 	.proc$/;"	l
getdtr	rtc.asm	/^getdtr  .proc$/;"	l
getdtr	rtc816.asm	/^getdtr  .proc$/;"	l
getdtraa	rtc816.asm	/^getdtraa pla                   ;get control B value &... $/;"	l
getutim	rtc.asm	/^getutim .proc$/;"	l
getutim	rtc816.asm	/^getutim                           .proc$/;"	l
getutim	test.asm	/^getutim .proc$/;"	l
hrsa_rtc	1511.asm	/^hrsa_rtc =io_rtc+wr_hrsa       ;alarm hour & IRQ control $/;"	l
hrst_rtc	1511.asm	/^hrst_rtc =io_rtc+wr_hrst       ;TOD hour $/;"	l
ide_blp	basic_ide_routines.asm	/^ide_blp$/;"	l
ide_dlp	basic_ide_routines.asm	/^ide_dlp$/;"	l
ide_err	basic_ide_routines.asm	/^ide_err$/;"	l
ide_get_id	basic_ide_routines.asm	/^ide_get_id                        .proc$/;"	l
ide_high_byte	basic_ide_routines.asm	/^ide_high_byte = $7f88$/;"	d
ide_id_drive_cmd	basic_ide_routines.asm	/^ide_id_drive_cmd = $ec$/;"	d
ide_init_devices	basic_ide_routines.asm	/^ide_init_devices                  .proc$/;"	l
ide_init_status	basic_ide_routines.asm	/^ide_init_status                   .proc$/;"	l
ide_lba0	basic_ide_routines.asm	/^ide_lba0 = $52			; LBA of desired sector LSB$/;"	d
ide_lba1	basic_ide_routines.asm	/^ide_lba1 = ide_lba0 + 1$/;"	d
ide_lba2	basic_ide_routines.asm	/^ide_lba2 = ide_lba1 + 1$/;"	d
ide_lba3	basic_ide_routines.asm	/^ide_lba3 = ide_lba2 + 1 	; - LBA of desired sector MSB$/;"	d
ide_mast	basic_ide_routines.asm	/^ide_mast$/;"	l
ide_read_buffer	basic_ide_routines.asm	/^ide_read_buffer                   .proc$/;"	l
ide_read_sector	basic_ide_routines.asm	/^ide_read_sector                   .proc$/;"	l
ide_read_sector_cmd	basic_ide_routines.asm	/^ide_read_sector_cmd = $20$/;"	d
ide_register0	basic_ide_routines.asm	/^ide_register0 = $7f80		; PLUTO IN\/OUT addresses for IDE port$/;"	d
ide_register1	basic_ide_routines.asm	/^ide_register1 = $7f81$/;"	d
ide_register2	basic_ide_routines.asm	/^ide_register2 = $7f82$/;"	d
ide_register3	basic_ide_routines.asm	/^ide_register3 = $7f83$/;"	d
ide_register4	basic_ide_routines.asm	/^ide_register4 = $7f84$/;"	d
ide_register5	basic_ide_routines.asm	/^ide_register5 = $7f85$/;"	d
ide_register6	basic_ide_routines.asm	/^ide_register6 = $7f86$/;"	d
ide_register7	basic_ide_routines.asm	/^ide_register7 = $7f87$/;"	d
ide_setup_lba	basic_ide_routines.asm	/^ide_setup_lba                     .proc$/;"	l
ide_srex	basic_ide_routines.asm	/^ide_srex$/;"	l
ide_status	basic_ide_routines.asm	/^ide_status = $58$/;"	d
ide_test_error	basic_ide_routines.asm	/^ide_test_error                    .proc$/;"	l
ide_time_out	basic_ide_routines.asm	/^ide_time_out$/;"	l
ide_to2	basic_ide_routines.asm	/^ide_to2$/;"	l
ide_wait_buffer	basic_ide_routines.asm	/^ide_wait_buffer .proc$/;"	l
ide_wait_busy_ready	basic_ide_routines.asm	/^ide_wait_busy_ready               .proc$/;"	l
ide_wbsy	basic_ide_routines.asm	/^ide_wbsy$/;"	l
ide_wdrq	basic_ide_routines.asm	/^ide_wdrq$/;"	l
ide_write_buffer	basic_ide_routines.asm	/^ide_write_buffer                  .proc$/;"	l
ide_write_sector	basic_ide_routines.asm	/^ide_write_sector                  .proc$/;"	l
ide_write_sector_cmd	basic_ide_routines.asm	/^ide_write_sector_cmd = $30$/;"	d
idebufrd	basic_ide_routines.asm	/^idebufrd$/;"	l
idebufwt	basic_ide_routines.asm	/^idebufwt$/;"	l
l0000010	rtc816.asm	/^l0000010$/;"	l
l0000020	rtc816.asm	/^l0000020 ;xba                   ;save adjusted hour $/;"	l
l10	rtc816.asm	/^l10                               stz alarmtim          ;yes, cancel alarm $/;"	l
l20	rtc816.asm	/^l20                               cpxw 0                ;null vector? $/;"	l
l30	rtc816.asm	/^l30                               lda utirqct           ;wait 'til msec count... $/;"	l
l40	rtc816.asm	/^l40                               plp                   ;restore MPU state... $/;"	l
lastblk	xmodem.asm	/^        lastblk = $a5       ; flag for last block$/;"	d
master_slave_select	basic_ide_routines.asm	/^master_slave_select               .proc$/;"	l
mina_rtc	1511.asm	/^mina_rtc =io_rtc+wr_mina       ;alarm minutes & IRQ control $/;"	l
mint_rtc	1511.asm	/^mint_rtc =io_rtc+wr_mint       ;TOD minutes $/;"	l
mon_rtc	1511.asm	/^mon_rtc  =io_rtc+wr_mon        ;month & control $/;"	l
n_rtcreg	rtc.asm	/^n_rtcreg =*-rtcreg$/;"	l
notdone	basic_ide_routines.asm	/^notdone                           lda ide_register7$/;"	l
nr_rtc	1511.asm	/^nr_rtc   =32                   ;total registers ($14-$1F reserved) $/;"	l
nvra_rtc	1511.asm	/^nvra_rtc =io_rtc+wr_nvra       ;NVRAM address port $/;"	l
nvrd_rtc	1511.asm	/^nvrd_rtc =io_rtc+wr_nvrd       ;NVRAM data port $/;"	l
ok	basic_ide_routines.asm	/^ok$/;"	l
ptr	xmodem.asm	/^        ptr = INDEX         ; data pointer (two byte variable)$/;"	d
ptrh	xmodem.asm	/^        ptrh = INDEXH       ;   "    "$/;"	d
putdtr	rtc.asm	/^putdtr  .proc$/;"	l
putdtr	rtc816.asm	/^putdtr                            .proc$/;"	l
retry	xmodem.asm	/^        retry = $ae         ; retry counter$/;"	d
retry2	xmodem.asm	/^        retry2 = $af        ; 2nd counter$/;"	d
rsva_rtc	1511.asm	/^rsva_rtc =io_rtc+wr_rsva       ;reserved $/;"	l
rsvb_rtc	1511.asm	/^rsvb_rtc =io_rtc+wr_rsvb       ;reserved $/;"	l
rtcparm	rtc.asm	/^rtcparm     .byte d11temsk$/;"	l
rtcreg	rtc.asm	/^rtcreg   .byte wr_crb          ;control B$/;"	l
s_d11tab	rtc816.asm	/^                                  s_d11tab = * - d11tab   ;table size$/;"	d
seca_rtc	1511.asm	/^seca_rtc =io_rtc+wr_seca       ;alarm seconds & IRQ control $/;"	l
sect_rtc	1511.asm	/^sect_rtc =io_rtc+wr_sect       ;TOD seconds $/;"	l
sector_buffer_ptr	basic_ide_routines.asm	/^sector_buffer_ptr = $50$/;"	d
tmp	basic_ide_routines.asm	/^tmp = $70$/;"	d
tmp1	basic_ide_routines.asm	/^tmp1 = tmp+1$/;"	d
tmp2	basic_ide_routines.asm	/^tmp2 = tmp+2$/;"	d
tmp3	basic_ide_routines.asm	/^tmp3 = tmp+3$/;"	d
todbuf	rtc.asm	/^        todbuf  = $80$/;"	d
utdelay	rtc.asm	/^utdelay .proc$/;"	l
utdelay	rtc816.asm	/^utdelay                           .proc$/;"	l
utdelay	test.asm	/^utdelay .proc$/;"	l
wdms_rtc	1511.asm	/^wdms_rtc =io_rtc+wr_wdms       ;watchdog millisecs*10 $/;"	l
wds_rtc	1511.asm	/^wds_rtc  =io_rtc+wr_wds        ;watchdog seconds $/;"	l
wr_cra	1511.asm	/^wr_cra   =$0e                  ;control register A... $/;"	l
wr_crb	1511.asm	/^wr_crb   =$0f                  ;control register B... $/;"	l
wr_crbpa	1511_constants.asm	/^wr_crbpa =%00000000            ;updates & WDT IRQs off$/;"	l
wr_crbpb	1511_constants.asm	/^wr_crbpb =%10100010            ;updates & WDT IRQs on$/;"	l
wr_datt	1511.asm	/^wr_datt  =$04                  ;date ($01-$31 BCD) $/;"	l
wr_dowa	1511.asm	/^wr_dowa  =$0b                  ;alarm date\/day & IRQ control... $/;"	l
wr_dowap	1511_constants.asm	/^wr_dowap =%00000000            ;no alarm date\/day IRQ$/;"	l
wr_dowt	1511.asm	/^wr_dowt  =$03                  ;day of week ($01-$07 BCD) $/;"	l
wr_hrsa	1511.asm	/^wr_hrsa  =$0a                  ;alarm hour & IRQ control... $/;"	l
wr_hrsap	1511_constants.asm	/^wr_hrsap =%00000000            ;no alarm hour IRQ$/;"	l
wr_hrst	1511.asm	/^wr_hrst  =$02                  ;TOD hour ($00-$23 BCD) $/;"	l
wr_mina	1511.asm	/^wr_mina  =$09                  ;alarm minutes & IRQ control... $/;"	l
wr_minap	1511_constants.asm	/^wr_minap =%00000000            ;no alarm min IRQ$/;"	l
wr_mint	1511.asm	/^wr_mint  =$01                  ;TOD minutes ($00-$59 BCD) $/;"	l
wr_mon	1511.asm	/^wr_mon   =$05                  ;month & control... $/;"	l
wr_nvra	1511.asm	/^wr_nvra  =$10                  ;NVRAM address port ($00-$FF) $/;"	l
wr_nvrd	1511.asm	/^wr_nvrd  =$13                  ;NVRAM data port $/;"	l
wr_rsva	1511.asm	/^wr_rsva  =$11                  ;reserved $/;"	l
wr_rsvb	1511.asm	/^wr_rsvb  =$12                  ;reserved $/;"	l
wr_seca	1511.asm	/^wr_seca  =$08                  ;alarm seconds & IRQ control... $/;"	l
wr_secap	1511_constants.asm	/^wr_secap =%00000000            ;no alarm secs IRQ$/;"	l
wr_sect	1511.asm	/^wr_sect  =$00                  ;TOD seconds ($00-$59 BCD) $/;"	l
wr_wdms	1511.asm	/^wr_wdms  =$0c                  ;watchdog millisecs*10 ($00-$99 BCD) $/;"	l
wr_wdmsp	1511_constants.asm	/^wr_wdmsp =$01                  ;10 ms underflows LSB$/;"	l
wr_wds	1511.asm	/^wr_wds   =$0d                  ;watchdog seconds ($00-$99 BCD) $/;"	l
wr_wdsp	1511_constants.asm	/^wr_wdsp  =$00                  ;10 ms underflows MSB$/;"	l
wr_yrhi	1511.asm	/^wr_yrhi  =$07                  ;year MSB ($00-$39 BCD) $/;"	l
wr_yrlo	1511.asm	/^wr_yrlo  =$06                  ;year LSB ($00-$99 BCD) $/;"	l
yrhi_rtc	1511.asm	/^yrhi_rtc =io_rtc+wr_yrhi       ;year MSB $/;"	l
yrlo_rtc	1511.asm	/^yrlo_rtc =io_rtc+wr_yrlo       ;year LSB $/;"	l
